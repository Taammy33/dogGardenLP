---
interface Props {
  type: "fade" | "text";
}

const {
  type
} = Astro.props;
---

<div class="fadeinWrapper" data-fade={type}>
  <div class="fadeinWrapper__inner">
    <slot />
  </div>
</div>

<style is:global lang="scss">
  @use "../styles/mixin" as *;
  [data-fade=fade]{
    visibility: hidden;
    transform: translateY(20px);
    opacity: 0;
    transition: all 1s ease-in-out;
    &.is-visible{
      transform: translateY(0);
      visibility: visible;
      opacity: 1;
    }
  }
  [data-fade=text]{
    > .fadeinWrapper__inner{
      clip-path: inset(0 100% 0 0);
      transition: clip-path 2s ease;
    }
    &.is-visible{
      > .fadeinWrapper__inner{
        clip-path: inset(0 0 0 0);
      }
    }
  }
</style>

<script>
  const observer = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        entry.target.classList.add('is-visible');
        observer.unobserve(entry.target);
      }
    });
  }, {
    threshold: 0.1
  });

  document.querySelectorAll('[data-fade]').forEach(el => {
    observer.observe(el);
  });
</script>